package pieces {  import armyBase;    import com.greensock.*;  import com.greensock.easing.*;    import common.ImgLoader;  import common.Label;    import dispatch.AddListenerEvent;  import dispatch.PopupEvent;    import empires.Empire;    import flash.display.MovieClip;  import flash.events.*;  import flash.utils.setTimeout;    import pieces.agents.Settler;    import static_return.FindAndTestSquare;  import static_return.GameConstants;  import static_return.GetDirection;  import static_return.UnitsStartNumbers;    public class Army extends GamePiece {    /*--------Classes Added------------*/	  public var lbl:Label;    	  	public function Army(emp, num, id=null) {  	  super(emp);  	  this_empire = emp;  	  game_piece = new armyBase();  	  scaleX = .85;  	  scaleY = .85;  	  addChild(game_piece);      this_empire.pieceArray.push(this);      this_empire.armyArray.push(this);      if(id != null) this_id(id);      empire_id(emp.attr['id']);  	  setAttributes(num);  	  addEventListener(MouseEvent.CLICK, animateSelect);    }  	  	private function setAttributes(num) {      attr['pieceType'] = "army";  	  setEmpire();  	  named("army_" + num + "_" + empire()[0]);  	  facing(true);  	  moves(5);  	}  	  	private function setEmpire() {      empire(this_empire.empire());  	  switch(empire()[0]) {    		case GameConstants.GAUL:    		  game_piece.armyIsGaul();    		  break;    		case GameConstants.ROME:    		  game_piece.armyIsRome();    		  break;    		default:    		  trace('none');    	  }  	}        public override function createJSON() {      var json = {        id: this_id(),        pieceType: 20,        empire_id: empire_id(),        name: named(),        square: square().name,        moves: moves(),        units: ""      }      units().forEach(function(unit) { json['units'] += unit.type() + "," + unit.men() + "||"; });      if(agents()) agents().forEach(function(agent) { json['agents'] += agent.type + "||"; });            return json;    }      	public function animateSelect(event:MouseEvent) {  	  var frame = '';  	  if(isSelected) {    		frame = 'select-ed'    		dispatchEvent(new AddListenerEvent(AddListenerEvent.EVENT, this, true));  	  } else {    		frame = 'unselect-ed';    		dispatchEvent(new AddListenerEvent(AddListenerEvent.EVENT, this, false));  	  }  	  game_piece.gotoAndPlay(frame);  	}	  	    public function payArmy() {      var total = 0;      units().forEach(function(unit) { total += unit.upkeep() });      return total*-1;    }    //-------------------------- Piece Movement    public override function stopWalk(sq) {      game_piece.gotoAndPlay('stand');      square(sq);      attr['moves']--;      dispatchEvent(new AddListenerEvent(AddListenerEvent.EVENT, this, true));    }  }}