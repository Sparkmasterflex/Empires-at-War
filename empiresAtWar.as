package {  import com.greensock.*;  import com.greensock.easing.*;    import common.HandCursor;    import control_panel.ControlPanel;    import dispatch.AddListenerEvent;  import dispatch.ControlPanelEvent;  import dispatch.MoveWindowEvent;  import dispatch.PopupEvent;  import dispatch.StageBuildEvent;    import flash.display.LoaderInfo;  import flash.display.Sprite;  import flash.display.StageDisplayState;  import flash.events.*;  import flash.external.ExternalInterface;  import flash.geom.Rectangle;  import flash.net.URLRequest;  import flash.text.TextField;  import flash.ui.Mouse;    import game_setup.DarkenEdges;  import game_setup.StartsWith;    import pieces.Army;  import pieces.City;    import stage.GameStage;    import static_return.CalculateStartPositions;  import static_return.GameConstants;  public class empiresAtWar extends Sprite {		/*---- Classes Added ----*/    private var edgeTop:DarkenEdges;    private var edgeLeft:DarkenEdges;	public var gStage:GameStage;	public var grids:Array;	private var cursor:HandCursor;	private var tF:TextField;	public var cp:ControlPanel;		/*---- Boolean ----*/	private var isNew:Boolean = true;	private var dragOn:Boolean = false;	private var spaceDown:Boolean = false;		/*-- Objects & Arrays --*/	public var params:Object;	public var posArr:Array;		/*-- Numbers --*/	public var armyCount:int = 0;	public var cityCount:int = 0;	public var supportCount:int = 0;		/*-- Strings and MovieClips --*/	private var pop;		/*-- FlashVars --*/	public var userName:String;	public var enemies:Array;	/*-- Will be defined by flashvars later --*/	  	public function empiresAtWar() {	  addEventListener(MoveWindowEvent.WINDOW, moveWindowHandler);	  addEventListener(StageBuildEvent.ALL_DONE, stageBuiltHandler);	  addEventListener(ControlPanelEvent.ANIMATE, controlPanelHandler);	  inFlash();//	  inBrowser();	  edgeTop = new DarkenEdges((3 * Math.PI)/2);	  edgeLeft = new DarkenEdges(0);	  this.parent.stage.addChild(edgeTop);	  this.parent.stage.addChild(edgeLeft);	  	  //ExternalInterface.addCallback("goToFullScreen", goFullScreen);	  //ExternalInterface.call("sendFullScreen");	}		private function inFlash() {	  params = new Object();	  params['username']   = 'Sparkmasterflex';	  params['empire']	   = GameConstants.GAUL;	  params['difficulty'] = GameConstants.EASYGAME;	  params['status'] 	   = GameConstants.NEW_GAME;	  params['sections']   = "0_5_13: terrain>20,0_5_12: terrain>40,0_5_11: terrain>20,0_5_15: terrain>30,0_5_16: terrain>10,0_5_14: terrain>10,0_6_13: terrain>90,0_6_12: terrain>100,0_6_15: terrain>90,0_6_14: terrain>30,0_7_13: terrain>80,0_7_14: terrain>90,0_8_13: terrain>40,0_8_12: terrain>40,0_8_15: terrain>80,0_8_14: terrain>10,0_9_13: terrain>60,0_9_12: terrain>60,0_9_11: terrain>50,0_9_15: terrain>30,0_9_16: terrain>30,0_9_14: terrain>60,0_10_13: terrain>60,0_10_12: terrain>40,0_10_11: terrain>100,0_10_10: terrain>100,0_10_15: terrain>40,0_10_16: terrain>20,0_10_17: terrain>60,0_10_14: terrain>50,0_4_13: terrain>40,0_4_12: terrain>20,0_4_11: terrain>60,0_4_10: terrain>100,0_4_9: terrain>40,0_4_15: terrain>10,0_4_16: terrain>50,0_4_17: terrain>70,0_4_18: terrain>70,0_4_14: terrain>80,0_3_13: terrain>80,0_3_12: terrain>40,0_3_11: terrain>60,0_3_10: terrain>60,0_3_9: terrain>20,0_3_8: terrain>90,0_3_15: terrain>40,0_3_16: terrain>60,0_3_17: terrain>60,0_3_18: terrain>60,0_3_19: terrain>20,0_3_14: terrain>60,0_2_13: terrain>20,0_2_12: terrain>20,0_2_11: terrain>20,0_2_10: terrain>20,0_2_9: terrain>50,0_2_15: terrain>10,0_2_16: terrain>90,0_2_17: terrain>70,0_2_18: terrain>30,0_2_19: terrain>80,0_2_20: terrain>40,0_2_14: terrain>90,0_1_13: terrain>90,0_1_12: terrain>80,0_1_11: terrain>60,0_1_10: terrain>90,0_1_15: terrain>90,0_1_16: terrain>60,0_1_17: terrain>70,0_1_18: terrain>10,0_1_19: terrain>80,0_1_14: terrain>50,"; 	  buildMap(params);	  addControlPanel(params);	}	private function inBrowser() {	  params = getFlashVars();	  buildMap(params);	}		private function getFlashVars():Object {	  return Object( LoaderInfo( this.loaderInfo ).parameters );	}		private function goFullScreen() {	  this.parent.stage.displayState = StageDisplayState.FULL_SCREEN;	}	    public function buildMap(params) {	  var empire = parseEmpireName(params['empire']);	  gStage = new GameStage(params);	  addChild(gStage);	  	  eventLiseners();	  addUserControlled(parseEmpireName(params['empire']), params['difficulty']);	}		public function addControlPanel(params) {	  var empire = params['empire'],		  money = 1000,		  turn  = 1;	  cp = new ControlPanel(parseEmpireName(empire), money, turn);	  addChild(cp);	}		private function addUserControlled(e, d) {	  gStage.pieceArray = new Array();	  var toStart = StartsWith.userStarts(d),	  	  randGrid = gStage.sGridArr[0],  //[Math.round(Math.random() * gStage.sGridArr.length)],		  startSq = randGrid.landSquares[Math.round(Math.random() * randGrid.landSquares.length)];	  posArr = CalculateStartPositions.ret(startSq);	  for(var j:String in toStart) {		switch(j) {		  case 'ARMY':		    addArmy(toStart.ARMY, e, toStart.armyUnits, posArr);		    break;		  case 'SETTLER':		    //addUserSettler(userObj.SETTLER);			break;		  case 'CITY':			addCity(toStart.CITY, e, startSq);			break;		}	  }	}		public function addCity(num, e, sq) {	  for(var i:uint = 0; i < num; i++) {		cityCount++;	    var city:City = new City(e, 10000, cityCount);		city.x = sq.x + 60;		city.y = sq.y + 60;	 	sq.addToSquare(city);		gStage.addChild(city);		city.empire(e);		gStage.pieceArray.push(city);	  }	}	public function addArmy(num, e, units, posArr) {	  for(var i:uint = 0; i < num; i++) {		armyCount++;	    var army:Army = new Army(e, units[i], armyCount),			sq = getLandSquare(posArr);  	    army.x = sq.x + 60;	    army.y = sq.y + 60; 	    sq.addToSquare(army);	    gStage.addChild(army);		army.empire(e);		gStage.pieceArray.push(army);	  }	}		private function getLandSquare(pos) {	  var rand = Math.round(Math.random() * 11),		  sq_name = pos[rand],	  	  section = gStage.getChildByName('section_' + sq_name.split('_')[0]),		  sq = section.getChildByName(sq_name);	  sq = (sq != null && !sq.gridInfo['army'] && sq.hasLand()) ? sq : getLandSquare(pos);	  return sq;	}		private function eventLiseners() {	  this.parent.stage.addEventListener(KeyboardEvent.KEY_DOWN, keyListenerDown);	  addEventListener(AddListenerEvent.EVENT, addListenerHandler);	  //addEventListener(displayEvent.DISPLAY, toCPanel);	}		private function parseEmpireName(emp):String {	  var empire:String;	  switch(emp) {		case GameConstants.EGYPT:		  empire = GameConstants.EMPIRES['EGYPT'];		  break;		case GameConstants.ROME:		  empire = GameConstants.EMPIRES['ROME'];		  break;		case GameConstants.JAPAN:		  empire = GameConstants.EMPIRES['JAPAN'];		  break;		case GameConstants.GAUL:		  empire = GameConstants.EMPIRES['GAUL'];		  break;	  }	  	  return empire;	}	/*--------------------------------------- Move Game Stage ------*/			private function keyListenerDown(event:KeyboardEvent) {	  	  if(event.keyCode == 32) {	    gStage.mouseChildren = false;	    Mouse.hide();		if(!spaceDown) {		  cursor = new HandCursor();		  addChild(cursor);		  spaceDown = true;		  this.parent.stage.addEventListener(Event.ENTER_FRAME, cursorMove);		}		this.parent.stage.addEventListener(KeyboardEvent.KEY_UP, keyListenerUp);		this.addEventListener(MouseEvent.MOUSE_DOWN, startStageDrag);	  }	  if(event.keyCode == 16) {		cp.selectedUnits.selectMultiple = true;		this.parent.stage.addEventListener(KeyboardEvent.KEY_UP, keyListenerUp);	  }	}		private function keyListenerUp(event:KeyboardEvent) {	  if(event.keyCode == 32) {		gStage.mouseChildren = true;		this.stopDrag();		this.parent.stage.removeEventListener(Event.ENTER_FRAME, cursorMove);		Mouse.show();		removeChild(cursor);		spaceDown = false;		this.parent.stage.removeEventListener(KeyboardEvent.KEY_UP, keyListenerUp);		removeEventListener(MouseEvent.MOUSE_DOWN, startStageDrag);	  }	  if(event.keyCode == 16) {		cp.selectedUnits.selectMultiple = false;		this.parent.stage.removeEventListener(KeyboardEvent.KEY_UP, keyListenerUp);	  }	}		private function startStageDrag(event:MouseEvent) {	  if(!dragOn) {		cursor.closeCursor(true);		dragOn = true;	  }	  var bounds:Rectangle = new Rectangle(		  this.parent.stage.stageWidth - gStage.width,		  this.parent.stage.stageHeight - gStage.height,		  gStage.width - this.parent.stage.stageWidth,		  gStage.height - this.parent.stage.stageHeight		);	  gStage.startDrag(false, bounds);	  addEventListener(MouseEvent.MOUSE_UP, stopStageDrag);	}		private function stopStageDrag(event:MouseEvent) {	  cursor.closeCursor(false);	  dragOn = false;	  gStage.stopDrag();	}		private function cursorMove(event:Event) {	  cursor.mouseEnabled = false;	  cursor.x = mouseX;	  cursor.y = mouseY;	}		public function stageBuiltHandler(event:StageBuildEvent) {	  addUserControlled(parseEmpireName(params['empire']), params['difficulty']);	}		private function moveWindowHandler(event:MoveWindowEvent) {	  gStage.x -= event.posX - GameConstants.WIDTH_CENTER;	  gStage.y -= event.posY - GameConstants.HEIGHT_CENTER;	  removeEventListener(MoveWindowEvent.WINDOW, moveWindowHandler);	}		private function controlPanelHandler(event:ControlPanelEvent) {	  cp.expand(event.isSelected, event.attr)	}		private function addListenerHandler(event:AddListenerEvent) {	  var mc = event.movieClip,		  listen = event.listen;	  (listen) ?		this.parent.stage.addEventListener(KeyboardEvent.KEY_DOWN, mc.pieceMoveKeyBoard) :		  this.parent.stage.removeEventListener(KeyboardEvent.KEY_DOWN, mc.pieceMoveKeyBoard);	}		/*--------------------------------------- Popup Functions -------*///	private function showPopup(popup) {//	  var centerW = GameConstants.WIDTH_CENTER - 200;//	  overlay = new OverLay(GameConstants.STAGE_WIDTH, GameConstants.STAGE_HEIGHT, popup);//	  overlay.alpha = 0;//	  addChild(overlay);//	  setChildIndex(overlay, this.numChildren - 2)//	  popup.x = centerW;//	  popup.y = 100;//	  popup.alpha = 0;//	  addChild(popup);//	  TweenLite.to(overlay, .25, { alpha:.4 }); //	  TweenLite.to(popup, .25, { y:25, alpha:1 }); //	}//	//	private function tweenOutPopup(popup) {//	  TweenLite.to(popup, .25, {x: 300, y: -50, scaleX:1.35, scaleY:1.35, alpha:0});//	  TweenLite.to(overlay, .25, {alpha:0, onComplete: removePopup, onCompleteParams: [popup]});//	}//	//	private function removePopup(p) {//	  removeChild(p);//	  removeChild(overlay);//	  pop = null;//	}		/*--------------------------------------- FormControlPanel ------*///	private function popupHandler(event:PopupEvent) {//	  var params = event.parameters,//		  show = event.showPopup,//		  empire = event.empire;	         //	  if(show) {//		if(pop) removePopup(pop);//		pop = determinePopup.ret(event.popup, params, empire);         //		showPopup(pop);//	  } else {//		tweenOutPopup(event.popup);//	  }//	}  }}