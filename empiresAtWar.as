package {  import com.greensock.*;  import com.greensock.easing.*;  import flash.utils.setTimeout;  import common.HandCursor;  import common.Label;  import game_setup.PreLoader2;  import control_panel.ui.SquareButton;    import control_panel.*;  import control_panel.ui.Overlay;  import control_panel.ui.Popup;  import control_panel.ui.popups.*;     import dispatch.*;    import empires.Empire;    import flash.display.LoaderInfo;  import flash.display.Sprite;  import flash.display.StageDisplayState;  import flash.events.*;  import flash.external.ExternalInterface;  import flash.geom.Rectangle;  import flash.net.URLRequest;  import flash.text.TextField;  import flash.ui.Mouse;    import game_setup.DarkenEdges;    import stage.GameStage;    import static_return.CalculateStartPositions;  import static_return.GameConstants;  public class empiresAtWar extends Sprite {		  /*---- Classes Added ----*/    private var edgeTop:DarkenEdges;    private var edgeLeft:DarkenEdges;  	public  var gStage:GameStage;  	public  var userEmpire:Empire;  	public  var grids:Array;  	private var cursor:HandCursor;  	private var tF:TextField;    public  var cp:ControlPanel;  	public  var info:InfoBox;  	public  var overlay:Overlay;    private var preLoader:PreLoader2;    public  var fullscreen:SquareButton;	  	/*---- Numbers ----*/  	public var currentTurn:int;  	  	/*---- Boolean ----*/  	private var isNew:Boolean = true;  	private var dragOn:Boolean = false;  	private var spaceDown:Boolean = false;  	  	/*-- Objects & Arrays --*/  	public var params;  	public var posArr:Array;    public var empireArr:Array;    public var tmpEmpireArr:Array;      	/*-- Strings and MovieClips --*/  	private var pop;  	  	/*-- FlashVars --*/  	public var userName:String;  	public var enemies:Array;  	/*-- Will be defined by flashvars later --*/	    	public function empiresAtWar() {      ExternalInterface.addCallback('set_id', find_empire_and_set_id);      addEventListener(MoveWindowEvent.WINDOW, moveWindowHandler);  	  addEventListener(StageBuildEvent.ALL_DONE, stageBuiltHandler);  	  addEventListener(ControlPanelEvent.ANIMATE, controlPanelHandler);      empireArr = new Array();//  	  inFlash();  	  inBrowser();  	  edgeTop = new DarkenEdges((3 * Math.PI)/2);  	  edgeLeft = new DarkenEdges(0);  	  this.parent.stage.addChild(edgeTop);  	  this.parent.stage.addChild(edgeLeft);  	  addEventListener(PopupEvent.POPUP, popupHandler);  	}  	  	private function inFlash() {  	  params = new Object();      var gaul:Object = {user_id: 1, empire: GameConstants.GAUL, treasury: 2500},          rome:Object = {empire: GameConstants.ROME, treasury: 2500}      params['game']             = new Object();      params['empires']          = [gaul, rome];      params['stage']            = new Object();  	  params['username']         = 'Sparkmasterflex';  	  params['game'].difficulty  = GameConstants.EASYGAME;  	  params['game'].status 	   = GameConstants.NEW_GAME;  	  params['game'].turn	       = 1;  	  buildMap(params);  	}    	private function inBrowser() {      ExternalInterface.addCallback('setup_empire', addEmpire);      var flashvars = getFlashVars();      params = JSON.parse(flashvars.json)      //preLoader = new PreLoader2(params['game'].user_empire);      //this.parent.stage.addChild(preLoader);      buildMap(params);  	}  	  	private function getFlashVars() {      return Object( LoaderInfo( this.loaderInfo ).parameters )  	}  	    public function buildMap(params) {  	  gStage = new GameStage(params, this);  	  addChild(gStage);  	  eventLiseners();      ExternalInterface.call('get_empires');  	}    public function addEmpire(e, game) {      var parsed_e = JSON.parse(e),          parsed_game = JSON.parse(game),          emp = new Empire(parsed_e, parsed_game, gStage, this);      addChild(emp);      empireArr.push(emp);      if(parsed_e.user_id) {        userEmpire = emp;        addControlPanel(parsed_game);        addInformationBox(parsed_game);      }    }    /* Finds Empire instance from DB id     *     * ==== Parameters:     * id:: Integer     *     * ==== Returns:     * Empire     */    private function empire_by_id(id) {      var e;      empireArr.forEach(function(emp) {        if(emp.attr['id'] == id) e = emp;      });      return e;    }  	  	public function addControlPanel(game) {  	  currentTurn = game.turn;  	  cp = new ControlPanel(userEmpire, currentTurn, this);  	  addChild(cp);  	}    public function addInformationBox(game) {      info = new InfoBox(game);      info.x = 0;      info.y = -300;      addChild(info);      TweenLite.to(info, 0.75, {y: 0, delay: 3});    }  	  	private function eventLiseners() {  	  this.parent.stage.addEventListener(KeyboardEvent.KEY_DOWN, keyListenerDown);  	  addEventListener(AddListenerEvent.EVENT, addListenerHandler);  	  //addEventListener(displayEvent.DISPLAY, toCPanel);  	}    private function stageSetup(event:Event) {      ExternalInterface.call('updateGameStatus', GameConstants.ACTIVE)      setTimeout(function() {        TweenLite.to(preLoader, 1, { alpha: 0, onComplete: removeLoader});      }, 2000);    }    private function removeLoader() {       this.parent.stage.removeChild(preLoader);      fullscreen = new SquareButton("Full Screen", 200, 50, 14);      fullscreen.x = GameConstants.WIDTH_CENTER - 100      fullscreen.y = GameConstants.HEIGHT_CENTER - 25      this.parent.stage.addChild(fullscreen);      fullscreen.addEventListener(MouseEvent.CLICK, goFullScreen);    }    public function goFullScreen(event:MouseEvent) {      this.parent.stage.displayState = StageDisplayState.FULL_SCREEN;      this.parent.stage.removeChild(fullscreen);    }  /*--------------------------------------- ExternalInterface Callbacks ------*/    /* Determines which empire piece belongs to and sets the id from database     *     * ==== Parameters:     * emp_id:: Integer     * n::      String     * id::     Integer     *     */    public function find_empire_and_set_id(json) {      var parse_obj = JSON.parse(json),          emp = empire_by_id(parse_obj.emp_id),          found_piece = emp.piece_by_name(parse_obj.n);      if(found_piece) found_piece.this_id(parse_obj.id);    }        /*--------------------------------------- Move Game Stage ------*/  	private function keyListenerDown(event:KeyboardEvent) {	    	  if(event.keyCode == 32) {  	    gStage.mouseChildren = false;  	    Mouse.hide();    		if(!spaceDown) {    		  cursor = new HandCursor();    		  addChild(cursor);    		  spaceDown = true;    		  this.parent.stage.addEventListener(Event.ENTER_FRAME, cursorMove);    		}    		this.parent.stage.addEventListener(KeyboardEvent.KEY_UP, keyListenerUp);    		this.addEventListener(MouseEvent.MOUSE_DOWN, startStageDrag);  	  }  	  if(event.keyCode == 16) {    		cp.selectedUnits.selectMultiple = true;    		this.parent.stage.addEventListener(KeyboardEvent.KEY_UP, keyListenerUp);  	  }  	}  	  	private function keyListenerUp(event:KeyboardEvent) {  	  if(event.keyCode == 32) {    		gStage.mouseChildren = true;    		this.stopDrag();    		this.parent.stage.removeEventListener(Event.ENTER_FRAME, cursorMove);    		Mouse.show();    		removeChild(cursor);    		spaceDown = false;    		this.parent.stage.removeEventListener(KeyboardEvent.KEY_UP, keyListenerUp);    		removeEventListener(MouseEvent.MOUSE_DOWN, startStageDrag);  	  }    	  if(event.keyCode == 16) {    		cp.selectedUnits.selectMultiple = false;    		this.parent.stage.removeEventListener(KeyboardEvent.KEY_UP, keyListenerUp);  	  }  	}  	  	private function startStageDrag(event:MouseEvent) {  	  if(!dragOn) {  		cursor.closeCursor(true);  		dragOn = true;  	  }  	  var bounds:Rectangle = new Rectangle(  		  this.parent.stage.stageWidth - gStage.width,  		  this.parent.stage.stageHeight - gStage.height,  		  gStage.width - this.parent.stage.stageWidth,  		  gStage.height - this.parent.stage.stageHeight  		);  	  gStage.startDrag(false, bounds);  	  addEventListener(MouseEvent.MOUSE_UP, stopStageDrag);  	}  	  	private function stopStageDrag(event:MouseEvent) {  	  cursor.closeCursor(false);  	  dragOn = false;  	  gStage.stopDrag();  	}  	  	private function cursorMove(event:Event) {  	  cursor.mouseEnabled = false;  	  cursor.x = mouseX;  	  cursor.y = mouseY;  	}  	  	public function stageBuiltHandler(event:StageBuildEvent) {  	  //addUserControlled(GameConstants.parseEmpireName(params['empire']), params['difficulty']);  	}  	  	private function moveWindowHandler(event:MoveWindowEvent) {  	  gStage.x -= event.posX - GameConstants.WIDTH_CENTER;  	  gStage.y -= event.posY - GameConstants.HEIGHT_CENTER;  	  removeEventListener(MoveWindowEvent.WINDOW, moveWindowHandler);  	}  	  	private function controlPanelHandler(event:ControlPanelEvent) {  	  cp.expand(event.isSelected, event.attr);      info.display(event.isSelected, event.attr);  	}  	  	private function addListenerHandler(event:AddListenerEvent) {  	  var mc = event.movieClip,  		    listen = event.listen;  	  (listen) ?    		this.parent.stage.addEventListener(KeyboardEvent.KEY_DOWN, mc.pieceMoveKeyBoard) :    		  this.parent.stage.removeEventListener(KeyboardEvent.KEY_DOWN, mc.pieceMoveKeyBoard);  	}  	  	/*--------------------------------------- Popup Functions -------*/  	private function showPopup(popup) {  	  var centerW = GameConstants.WIDTH_CENTER - popup.this_width/2;  	  overlay = new Overlay(GameConstants.STAGE_WIDTH, GameConstants.STAGE_HEIGHT, popup);  	  overlay.alpha = 0;  	  addChild(overlay);  	  setChildIndex(overlay, this.numChildren - 2);  	  popup.x = centerW;  	  popup.y = 100;  	  popup.alpha = 0;  	  addChild(popup);  	  TweenLite.to(overlay, .25, { alpha:.4 });   	  TweenLite.to(popup, .25, { y:25, alpha:1 });   	}  	  	private function tweenOutPopup(popup) {  	  TweenLite.to(popup, .25, {x: (GameConstants.WIDTH_CENTER - (popup.width*1.35)/2), y: -50, scaleX:1.35, scaleY:1.35, alpha:0});  	  TweenLite.to(overlay, .25, {alpha:0, onComplete: removePopup, onCompleteParams: [popup]});  	}  	  	private function removePopup(p) {  	  removeChild(p);  	  removeChild(overlay);  	  pop = null;  	}  	  	/*--------------------------------------- FormControlPanel ------*/  	private function popupHandler(event:PopupEvent) {  	  var popup = event.popup,  	      params = event.parameters,    		  show = event.showPopup,    		  object = event.object,          type = event.popup;  	    	  if(show) {    		if(pop) removePopup(pop);    		switch(popup) {          case 'City':            pop = new BuildPopup(params, object);            break;          case 'Army':            pop = new RecruitPopup(params, object);            break;          case 'Battle':            // when battle, object is array of attacker and defender            // actual gamepieces            pop = new BattlePopup(type, object[0], object[1]);            break;          case 'Unit':            pop = new UnitPopup(type, object);          default:            null;        }    		showPopup(pop);  	  } else {  		  tweenOutPopup(event.popup);  	  }  	}  }}